{
	"twosat": {
  "prefix": "twosat",
  "body": [
    "struct twoSAT{",
    "    int n;",
    "    vvi g;",
    "    vi ans;",
    "",
    "    twoSAT(int n) : n(n), g(n + n), ans(n) {}",
    "",
    "    void addClause(int u, bool f1, int v, bool f2){",
    "        g[u + u + !f1].push_back(v + v + f2);",
    "        g[v + v + !f2].push_back(u + u + f1);",
    "    }",
    "",
    "    bool isSatisfiable(){",
    "        vi id(n + n, -1), dfn(n + n, -1), low(n + n, -1);",
    "        vi stk;",
    "        int now = 0;",
    "        int cnt = 0;",
    "",
    "        function<void(int)> tarjan = [&](int v){",
    "            stk.push_back(v);",
    "            dfn[v] = low[v] = now++;",
    "            for(auto x : g[v]){",
    "                if(dfn[x] == -1){",
    "                    tarjan(x);",
    "                    low[v] = min(low[x], low[v]);",
    "                }",
    "                else if(id[x] == -1){",
    "                    low[v] = min(dfn[x], low[v]);",
    "                }",
    "            }",
    "            if(dfn[v] == low[v]){",
    "                int u;",
    "                do{",
    "                    u = stk.back();",
    "                    stk.pop_back();",
    "                    id[u] = cnt;",
    "                } while(u != v);",
    "                cnt++;",
    "            }",
    "        };",
    "",
    "        for(int i = 0; i < n + n; i ++){",
    "            if(dfn[i] == -1) tarjan(i);",
    "        }",
    "",
    "        for(all){",
    "            if(id[i + i] == id[i + i + 1]) return false;",
    "            ans[i] = id[i + i] > id[i + i + 1];",
    "        }",
    "        return true;",
    "    }",
    "",
    "    vi getAnswer(){",
    "        return ans;",
    "    }",
    "}; "
  ],
  "description": "twosat"
}
}