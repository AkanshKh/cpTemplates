{
	"trieinteger": {
  "prefix": "trieinteger",
  "body": [
    "struct Node {",
    "    Node* links[2];",
    "    bool flag = false;",
    "    int countPref=0;",
    "    int endsHere=0;",
    "",
    "    bool containsKey(int bit){",
    "        return (links[bit] != NULL);",
    "    }",
    "",
    "    void put(int bit, Node* node){",
    "        links[bit] = node;",
    "    }",
    "",
    "    Node* get(int bit){",
    "        return links[bit];",
    "    }",
    "",
    "    void incEnd(){",
    "        endsHere++;",
    "    }",
    "    void incPref(){",
    "        countPref++;",
    "    }",
    "",
    "    void decPref(){",
    "        countPref--;",
    "    }",
    "    void deleteEnd(){",
    "        endsHere--; ",
    "    }",
    "    void setEnd(){",
    "        flag = true;",
    "    }",
    "",
    "    bool isEnd(){",
    "        return flag;",
    "    }",
    "};",
    "",
    "class Trie {",
    "",
    "private: ",
    "    Node* root;",
    "",
    "public:",
    "",
    "    Trie() {",
    "        root = new Node();",
    "    }",
    "",
    "    void insert(int num){",
    "        Node* node = root;",
    "",
    "        for(int i=31; i>= 0; i--){",
    "            int bit = (num >> i) & 1;",
    "            if(!(node->containsKey(bit))){",
    "                node->put(bit, new Node());",
    "            }",
    "            node = node->get(bit);",
    "            node->incPref();",
    "        }",
    "        node->incEnd();",
    "        node->setEnd();",
    "    }",
    "",
    "    int getMaxXOR(int num){",
    "    Node* node = root;",
    "    int maxNum=0;",
    "    ",
    "    for(int i=31; i >= 0; i--){",
    "        int bit = (num>>i)&1;",
    "        if(node->containsKey(!bit)){",
    "            maxNum|=(1<<i);",
    "            node = node->get(!bit);",
    "        }",
    "        else{",
    "            if(node->containsKey(bit)){",
    "                node = node->get(bit);",
    "            }",
    "            else{",
    "                return -1;",
    "            }",
    "        }",
    "    }",
    "",
    "    return maxNum;",
    "    }",
    "",
    "    void erase(int num){",
    "        Node* node = root;",
    "        for(int i=31; i>=0; i--){",
    "            int bit = (num>>i)&1;",
    "            Node* next = node->get(bit);",
    "            if(next->countPref == 1){",
    "                node->put(bit, NULL);",
    "                return;",
    "            }",
    "            node = next;",
    "            node->decPref();",
    "        }",
    "        node->deleteEnd();",
    "    }",
    "};"
  ],
  "description": "trieinteger"
}
}