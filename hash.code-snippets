{
  "haaash": {
  "prefix": "haaash",
  "body": [
    "const int mod = 1e9 + 9;",
    "const int MAXLEN = 1e6 + 7;",
    "int p = 99991;",
    "int base_pow[MAXLEN];",
    "",
    "void init(){",
    "    base_pow[0] = 1;",
    "    for(int i = 1; i < MAXLEN; i++){",
    "        base_pow[i] = (base_pow[i - 1] * p) % mod;",
    "    }",
    "}",
    "",
    "struct Hash{",
    "    vector<int> hsh, rhsh;",
    "",
    "    Hash(){}",
    "",
    "    template<typename T>",
    "    Hash(const vector<T>& arr){",
    "        if(!base_pow[0]) init();",
    "",
    "        int n = arr.size();",
    "        assert(n < MAXLEN);",
    "",
    "        hsh.resize(n + 3, 0), rhsh.resize(n + 3, 0);",
    "",
    "        for(int i = 1; i <= n; i ++){",
    "            hsh[i] = ((hsh[i - 1] * p) % mod + arr[i - 1] + 997) % mod;",
    "        }",
    "",
    "        for(int i = n; i >= 1; i --){",
    "            rhsh[i] = ((rhsh[i + 1] * p) % mod + arr[i - 1] + 997) % mod;",
    "        }",
    "    }",
    "",
    "    Hash(const char* str) : Hash(vector<char>(str, str + strlen(str))) {}",
    "",
    "    int get_hsh(int l, int r){",
    "        l ++, r ++;",
    "        int h = hsh[r] - (base_pow[r - l + 1] * hsh[l - 1]) % mod;",
    "        h = (h < 0 ? h + mod : h);",
    "        return h;",
    "    }",
    "",
    "    int get_rhsh(int l, int r){",
    "        l ++, r ++;",
    "        int h = rhsh[l] - (base_pow[r - l + 1] * rhsh[r + 1]) % mod;",
    "        h = (h < 0 ? h + mod : h);",
    "        return h;",
    "    }",
    "};"
  ],
  "description": "haaash"
}
}