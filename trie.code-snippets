{
	"trie": {
  "prefix": "trie",
  "body": [
    "struct Node {",
    "    Node* links[26];",
    "    bool flag = false;",
    "    int countPref=0;",
    "    int endsHere=0;",
    "",
    "    bool containsKey(char c){",
    "        return (links[c-'a'] != NULL);",
    "    }",
    "",
    "    void put(char c, Node* node){",
    "        links[c-'a'] = node;",
    "    }",
    "",
    "    Node* get(char c){",
    "        return links[c-'a'];",
    "    }",
    "",
    "    void incEnd(){",
    "        endsHere++;",
    "    }",
    "    void incPref(){",
    "        countPref++;",
    "    }",
    "",
    "    void decPref(){",
    "        countPref--;",
    "    }",
    "    void deleteEnd(){",
    "        endsHere--; ",
    "    }",
    "    void setEnd(){",
    "        flag = true;",
    "    }",
    "",
    "    bool isEnd(){",
    "        return flag;",
    "    }",
    "};",
    "",
    "class Trie {",
    "",
    "private: ",
    "    Node* root;",
    "",
    "public:",
    "",
    "    Trie() {",
    "        root = new Node();",
    "    }",
    "",
    "    void insert(string word) {",
    "        Node* node = root;",
    "",
    "        for(int i = 0; i < word.length(); i++){",
    "            if(!(node->containsKey(word[i]))){",
    "                node->put(word[i],new Node());",
    "            }",
    "            node = node->get(word[i]);",
    "        }",
    "",
    "        node->setEnd();",
    "    }",
    "",
    "    bool search(string word) {",
    "        Node* node = root;",
    "        ",
    "        for(int i = 0; i < word.length(); i++){",
    "            if(!(node->containsKey(word[i]))){",
    "                return false;",
    "            }",
    "            node = node->get(word[i]);",
    "        }",
    "",
    "        return node->isEnd();",
    "",
    "    }",
    "",
    "    bool startsWith(string prefix) {",
    "        Node* node = root;",
    "        ",
    "        for(int i=0;i<prefix.length();i++){",
    "            if(!(node->containsKey(prefix[i]))){",
    "                return false;",
    "            }",
    "            node = node->get(prefix[i]);",
    "        }",
    "        return true;",
    "    }",
    "    int countWordsEqualTo(string &word){",
    "        Node* node = root;",
    "        for(int i = 0; i < word.length(); i++){",
    "            if(!(node->containsKey(word[i]))){",
    "                return 0;",
    "            }",
    "            node->get(word[i]);",
    "        }",
    "        return node->endsHere;",
    "    }",
    "",
    "    int countWordsStartingWith(string &word){",
    "        Node* node = root;",
    "        for(int i = 0; i < word.length(); i++){",
    "            if(!(node->containsKey(word[i]))){",
    "                return 0;",
    "            }",
    "            node->get(word[i]);",
    "        }",
    "        return node->countPref;",
    "    }",
    "",
    "    void erase(string &word){",
    "        Node* node = root;",
    "        for(int i = 0; i < word.length(); i++){",
    "            if(!(node->containsKey(word[i]))){",
    "                return;",
    "            }",
    "            node->get(word[i]);",
    "            node->decPref();",
    "        }",
    "        node->deleteEnd();",
    "    }",
    "};"
  ],
  "description": "trie"
}
}